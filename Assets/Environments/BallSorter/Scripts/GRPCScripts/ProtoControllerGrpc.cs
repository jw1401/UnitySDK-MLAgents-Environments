// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtoController.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class Controller
{
  static readonly string __ServiceName = "Controller";

  static readonly grpc::Marshaller<global::Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Empty.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ObservationResponse> __Marshaller_ObservationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ObservationResponse.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ActionRequest> __Marshaller_ActionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ActionRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ActionsResponse> __Marshaller_ActionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ActionsResponse.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Status> __Marshaller_Status = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Status.Parser.ParseFrom);

  static readonly grpc::Method<global::Empty, global::ObservationResponse> __Method_GetObservations = new grpc::Method<global::Empty, global::ObservationResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetObservations",
      __Marshaller_Empty,
      __Marshaller_ObservationResponse);

  static readonly grpc::Method<global::ActionRequest, global::ActionsResponse> __Method_SetActions = new grpc::Method<global::ActionRequest, global::ActionsResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SetActions",
      __Marshaller_ActionRequest,
      __Marshaller_ActionsResponse);

  static readonly grpc::Method<global::Empty, global::Status> __Method_GetStatus = new grpc::Method<global::Empty, global::Status>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetStatus",
      __Marshaller_Empty,
      __Marshaller_Status);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ProtoControllerReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of Controller</summary>
  public abstract partial class ControllerBase
  {
    public virtual global::System.Threading.Tasks.Task<global::ObservationResponse> GetObservations(global::Empty request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::ActionsResponse> SetActions(global::ActionRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Status> GetStatus(global::Empty request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for Controller</summary>
  public partial class ControllerClient : grpc::ClientBase<ControllerClient>
  {
    /// <summary>Creates a new client for Controller</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public ControllerClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for Controller that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public ControllerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected ControllerClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected ControllerClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::ObservationResponse GetObservations(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetObservations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ObservationResponse GetObservations(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetObservations, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ObservationResponse> GetObservationsAsync(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetObservationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ObservationResponse> GetObservationsAsync(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetObservations, null, options, request);
    }
    public virtual global::ActionsResponse SetActions(global::ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SetActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ActionsResponse SetActions(global::ActionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SetActions, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ActionsResponse> SetActionsAsync(global::ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SetActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ActionsResponse> SetActionsAsync(global::ActionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SetActions, null, options, request);
    }
    public virtual global::Status GetStatus(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Status GetStatus(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Status> GetStatusAsync(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Status> GetStatusAsync(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override ControllerClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new ControllerClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(ControllerBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_GetObservations, serviceImpl.GetObservations)
        .AddMethod(__Method_SetActions, serviceImpl.SetActions)
        .AddMethod(__Method_GetStatus, serviceImpl.GetStatus).Build();
  }

}
#endregion
